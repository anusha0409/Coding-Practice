class MedianFinder {
public:
    /** initialize your data structure here. */
    priority_queue <int, vector<int>> maxHeap;
    priority_queue <int, vector<int>, greater<int> > minHeap;
    
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        if(minHeap.empty())
            minHeap.push(num);
        else
        {
            if(num>=minHeap.top())
              minHeap.push(num);
            else
                maxHeap.push(num);
        }
        if(minHeap.size()>maxHeap.size()+1)
        {
            maxHeap.push(minHeap.top());
            minHeap.pop();
        }
        else if(maxHeap.size()>minHeap.size())
        {
            minHeap.push(maxHeap.top());
            maxHeap.pop();
        }
    }
    
    double findMedian() {
        return (minHeap.size()==maxHeap.size()? 0.5*(minHeap.top()+maxHeap.top()) : minHeap.top());
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */

class Solution {
public:
    typedef vector <int> pi; 
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        auto cmp=[&](const pi &a,const pi&b)
        {
            return a[0]*a[0] + a[1]*a[1] > b[0]*b[0] + b[1]*b[1];
        };
       typedef priority_queue < pi, vector<pi>, decltype(cmp)> my_priority_queue_t;
        my_priority_queue_t pq(cmp);
        
        for(int i=0;i<points.size();i++)
        {
            pq.push(points[i]);
        }
        vector < vector<int>> ans;
         while(K--)
         {
             ans.push_back(pq.top());
             pq.pop();
         }
        return ans;
        
    }
};
